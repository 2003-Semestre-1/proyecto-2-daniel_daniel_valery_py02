/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.p1ddv;

import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;
import java.util.Stack;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Gadyr
 */
public class MainFrame extends javax.swing.JFrame {
    String fileName;
    int filesRead = 0;
    
    EstrategiaManager estrategiaManager;
    /* Por default se selecciona FCFS*/
    Estrategia estrategiaAsignacion = Estrategia.FCFS;
    
    int posMemoriaLibre = 11;
            
    int espacio_memoria = 256;
    int MAX_DISK_MEMORY = 512;
    int MAX_STACK_SIZE = 10;
    
    List<BCP> readyQueue = new LinkedList<>();
    
   
    ProgramLoader loader = new ProgramLoader();
    
    Instruction[] memoriaPrincipal = new Instruction[espacio_memoria];
    
    Cpu cpu1 = new Cpu(1);
    Cpu cpu2 = new Cpu(2);
    Cpu cpu3 = new Cpu(3);
    Cpu cpu4 = new Cpu(4);
    
    
    int PC=11;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        cpu1.setMemoria(memoriaPrincipal);
        cpu2.setMemoria(memoriaPrincipal);
        estrategiaManager = new EstrategiaManager(estrategiaAsignacion, readyQueue);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        ejecutarBtn = new javax.swing.JButton();
        pasoBtn = new javax.swing.JButton();
        limpiarBtn = new javax.swing.JButton();
        cargarBtn = new javax.swing.JButton();
        fileNameLbl = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        procesosTbl = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        cpu1Table = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        cpu2Table = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        bcpTbl1 = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        bcpTbl2 = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        memTable = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        discoTbl = new javax.swing.JTable();
        configBtn = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        logsTbl = new javax.swing.JTable();
        jScrollPane10 = new javax.swing.JScrollPane();
        logsTbl1 = new javax.swing.JTable();
        jScrollPane11 = new javax.swing.JScrollPane();
        bcpTbl3 = new javax.swing.JTable();
        jScrollPane12 = new javax.swing.JScrollPane();
        estatsTbl = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane13 = new javax.swing.JScrollPane();
        cpu3Tbl = new javax.swing.JTable();
        jScrollPane14 = new javax.swing.JScrollPane();
        logsTbl2 = new javax.swing.JTable();
        jScrollPane15 = new javax.swing.JScrollPane();
        cpu4Tbl = new javax.swing.JTable();
        jScrollPane16 = new javax.swing.JScrollPane();
        logsTbl3 = new javax.swing.JTable();
        autBtn = new javax.swing.JRadioButton();
        manBtn = new javax.swing.JRadioButton();
        tiempoManual = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        fcfsBtn = new javax.swing.JRadioButton();
        srtBtn = new javax.swing.JRadioButton();
        sjfBtn = new javax.swing.JRadioButton();
        rrBtn = new javax.swing.JRadioButton();
        hrrnBtn = new javax.swing.JRadioButton();
        pagBtn = new javax.swing.JRadioButton();
        partDBtn = new javax.swing.JRadioButton();
        partFBtn = new javax.swing.JRadioButton();
        quantumRR = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1430, 1040));

        ejecutarBtn.setText("Ejecutar");
        ejecutarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ejecutarBtnActionPerformed(evt);
            }
        });

        pasoBtn.setText("Paso a paso");
        pasoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasoBtnActionPerformed(evt);
            }
        });

        limpiarBtn.setText("Limpiar");
        limpiarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarBtnActionPerformed(evt);
            }
        });

        cargarBtn.setText("Cargar archivo");
        cargarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarBtnActionPerformed(evt);
            }
        });

        fileNameLbl.setText("Tiempo de llegada");

        procesosTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Proceso", "Estado"
            }
        ));
        jScrollPane1.setViewportView(procesosTbl);

        cpu1Table.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        cpu1Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CPU 1"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        cpu1Table.setAutoResizeMode(0);
        cpu1Table.setCellSelectionEnabled(true);
        cpu1Table.setShowGrid(true);
        jScrollPane2.setViewportView(cpu1Table);
        if (cpu1Table.getColumnModel().getColumnCount() > 0) {
            cpu1Table.getColumnModel().getColumn(0).setResizable(false);
        }

        cpu2Table.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        cpu2Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CPU 2"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        cpu2Table.setAutoResizeMode(0);
        cpu2Table.setShowGrid(true);
        jScrollPane3.setViewportView(cpu2Table);
        if (cpu2Table.getColumnModel().getColumnCount() > 0) {
            cpu2Table.getColumnModel().getColumn(0).setResizable(false);
        }

        bcpTbl1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "BCP CPU1"
            }
        ));
        jScrollPane4.setViewportView(bcpTbl1);

        bcpTbl2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "BCP CPU2"
            }
        ));
        jScrollPane5.setViewportView(bcpTbl2);

        memTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Pos", "Valor en memoria"
            }
        ));
        jScrollPane6.setViewportView(memTable);

        discoTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Pos", "Valor en disco"
            }
        ));
        jScrollPane7.setViewportView(discoTbl);

        configBtn.setText("Configuracion");
        configBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configBtnActionPerformed(evt);
            }
        });

        logsTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "logs"
            }
        ));
        jScrollPane9.setViewportView(logsTbl);

        logsTbl1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "logs"
            }
        ));
        jScrollPane10.setViewportView(logsTbl1);

        bcpTbl3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "BCP Ultimo proceso ejecutado"
            }
        ));
        jScrollPane11.setViewportView(bcpTbl3);

        estatsTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Proceso", "Tiempo Inicio", "Tiempo empleado"
            }
        ));
        jScrollPane12.setViewportView(estatsTbl);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("Configuración");

        jButton1.setText("Estadisticas");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        cpu3Tbl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        cpu3Tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CPU 3"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        cpu3Tbl.setAutoResizeMode(0);
        cpu3Tbl.setShowGrid(true);
        jScrollPane13.setViewportView(cpu3Tbl);
        if (cpu3Tbl.getColumnModel().getColumnCount() > 0) {
            cpu3Tbl.getColumnModel().getColumn(0).setResizable(false);
        }

        logsTbl2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "logs"
            }
        ));
        jScrollPane14.setViewportView(logsTbl2);

        cpu4Tbl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        cpu4Tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CPU 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        cpu4Tbl.setAutoResizeMode(0);
        cpu4Tbl.setShowGrid(true);
        jScrollPane15.setViewportView(cpu4Tbl);
        if (cpu4Tbl.getColumnModel().getColumnCount() > 0) {
            cpu4Tbl.getColumnModel().getColumn(0).setResizable(false);
        }

        logsTbl3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "logs"
            }
        ));
        jScrollPane16.setViewportView(logsTbl3);

        autBtn.setSelected(true);
        autBtn.setText("Aut");
        autBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autBtnActionPerformed(evt);
            }
        });

        manBtn.setText("Man");
        manBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manBtnActionPerformed(evt);
            }
        });

        tiempoManual.setEditable(false);
        tiempoManual.setText("Tiempo");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Estadisticas");

        fcfsBtn.setSelected(true);
        fcfsBtn.setText("FCFS");
        fcfsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fcfsBtnActionPerformed(evt);
            }
        });

        srtBtn.setText("SRT");
        srtBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                srtBtnActionPerformed(evt);
            }
        });

        sjfBtn.setText("SJF");
        sjfBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sjfBtnActionPerformed(evt);
            }
        });

        rrBtn.setText("RR");
        rrBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rrBtnActionPerformed(evt);
            }
        });

        hrrnBtn.setText("HRRN");
        hrrnBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hrrnBtnActionPerformed(evt);
            }
        });

        pagBtn.setText("Paginación");
        pagBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pagBtnActionPerformed(evt);
            }
        });

        partDBtn.setText("Part. Dinámico");
        partDBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                partDBtnActionPerformed(evt);
            }
        });

        partFBtn.setText("Part. fijo");
        partFBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                partFBtnActionPerformed(evt);
            }
        });

        quantumRR.setEditable(false);
        quantumRR.setText("000");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ejecutarBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                                .addComponent(pasoBtn))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(limpiarBtn)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(115, 115, 115)
                                .addComponent(cargarBtn))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(fileNameLbl)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(autBtn)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(manBtn)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(tiempoManual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(109, 109, 109))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(181, 181, 181)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel2)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(28, 28, 28)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(fcfsBtn)
                                            .addComponent(srtBtn)
                                            .addComponent(sjfBtn)
                                            .addComponent(hrrnBtn)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(rrBtn)
                                                .addGap(18, 18, 18)
                                                .addComponent(quantumRR)))
                                        .addGap(250, 250, 250)))
                                .addGap(9, 9, 9))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 522, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(pagBtn)
                                    .addComponent(configBtn)
                                    .addComponent(partDBtn)
                                    .addComponent(partFBtn))))
                        .addGap(51, 51, 51))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 928, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 928, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 928, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 928, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(57, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ejecutarBtn)
                    .addComponent(pasoBtn)
                    .addComponent(limpiarBtn)
                    .addComponent(cargarBtn)
                    .addComponent(configBtn)
                    .addComponent(jButton1)
                    .addComponent(autBtn)
                    .addComponent(manBtn)
                    .addComponent(tiempoManual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileNameLbl))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE))
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fcfsBtn)
                            .addComponent(pagBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(srtBtn)
                            .addComponent(partDBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sjfBtn)
                            .addComponent(partFBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hrrnBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rrBtn)
                            .addComponent(quantumRR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cargarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarBtnActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        fileChooser.setFileFilter(new FileNameExtensionFilter("", "asm"));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
//            fileNameLbl.setText(selectedFile.getAbsolutePath());
            fileName = selectedFile.getAbsolutePath();
            cargarArchivos(fileName);
            
        }
    }//GEN-LAST:event_cargarBtnActionPerformed

    private void limpiarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarBtnActionPerformed
        // TODO add your handling code here:
        limpiar();
    }//GEN-LAST:event_limpiarBtnActionPerformed

    private void configBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configBtnActionPerformed
        // TODO add your handling code here:
        JFrame frame = new JFrame();

        JPanel panel = (JPanel) frame.getContentPane();
        panel.setLayout(null);

        JLabel label = new JLabel("Espacio de memoria disponible: ");
        JTextField texto = new JTextField(String.valueOf(memoriaPrincipal.length));
        JButton actualizar = new JButton("Actualizar memoria");
        panel.add(texto);
        panel.add(label);
        panel.add(actualizar);
        Dimension size = label.getPreferredSize();
        label.setBounds(10, 20, size.width, size.height);
        texto.setBounds(210, 15, size.width-20, size.height+10);
        actualizar.setBounds(150, 100, size.width, size.height+10);
        
        
        actualizar.addActionListener((ActionEvent e) -> {
            int nuevaMem = Integer.parseInt(texto.getText());
            if(nuevaMem < 22){
                JOptionPane.showMessageDialog(this, "EL nuevo espacio de memoria es muy reducido", "ERROR",JOptionPane.ERROR_MESSAGE);
                return;
            }
            actualizarMemoriaP(nuevaMem);  
        }); 
        
        frame.setSize(500, 200);
        frame.setVisible(true);
    }//GEN-LAST:event_configBtnActionPerformed

    private void pasoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasoBtnActionPerformed
        try {
            ejecutarProcesoPasoApaso();
        } catch (Exception ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_pasoBtnActionPerformed

    private void ejecutarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ejecutarBtnActionPerformed
        try {
            // TODO add your handling code here:
            ejecutarProcesoAut();
        } catch (Exception ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ejecutarBtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        cargarEstadisticas();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void autBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autBtnActionPerformed
        // TODO add your handling code here:
        manBtn.setSelected(false);
        tiempoManual.setEditable(false);
        tiempoManual.setText("Tiempo");
    }//GEN-LAST:event_autBtnActionPerformed

    private void manBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manBtnActionPerformed
        // TODO add your handling code here:
        autBtn.setSelected(false);
        tiempoManual.setEditable(true);
    }//GEN-LAST:event_manBtnActionPerformed

    private void srtBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_srtBtnActionPerformed
        // TODO add your handling code here:
        this.estrategiaAsignacion = Estrategia.SRT;
        sjfBtn.setSelected(false);
        fcfsBtn.setSelected(false);
        srtBtn.setSelected(false);
        hrrnBtn.setSelected(false);
        quantumRR.setEditable(false);
    }//GEN-LAST:event_srtBtnActionPerformed

    private void fcfsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fcfsBtnActionPerformed
        // TODO add your handling code here:
        this.estrategiaAsignacion = Estrategia.FCFS;
        sjfBtn.setSelected(false);
        rrBtn.setSelected(false);
        srtBtn.setSelected(false);
        hrrnBtn.setSelected(false);
        quantumRR.setEditable(false);
    }//GEN-LAST:event_fcfsBtnActionPerformed

    private void sjfBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sjfBtnActionPerformed
        // TODO add your handling code here:
        this.estrategiaAsignacion = Estrategia.SJF;
        rrBtn.setSelected(false);
        fcfsBtn.setSelected(false);
        srtBtn.setSelected(false);
        hrrnBtn.setSelected(false);
        quantumRR.setEditable(false);
    }//GEN-LAST:event_sjfBtnActionPerformed

    private void hrrnBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hrrnBtnActionPerformed
        // TODO add your handling code here:
        this.estrategiaAsignacion = Estrategia.HRRN;
        sjfBtn.setSelected(false);
        fcfsBtn.setSelected(false);
        srtBtn.setSelected(false);
        rrBtn.setSelected(false);
        quantumRR.setEditable(false);
    }//GEN-LAST:event_hrrnBtnActionPerformed

    private void rrBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rrBtnActionPerformed
        // TODO add your handling code here:
        this.estrategiaAsignacion = Estrategia.RR;
        sjfBtn.setSelected(false);
        fcfsBtn.setSelected(false);
        srtBtn.setSelected(false);
        hrrnBtn.setSelected(false);
        quantumRR.setEditable(true);
    }//GEN-LAST:event_rrBtnActionPerformed

    private void pagBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pagBtnActionPerformed
        // TODO add your handling code here:
        partDBtn.setSelected(false);
        partFBtn.setSelected(false);
    }//GEN-LAST:event_pagBtnActionPerformed

    private void partDBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_partDBtnActionPerformed
        // TODO add your handling code here:
        pagBtn.setSelected(false);
        partFBtn.setSelected(false);
    }//GEN-LAST:event_partDBtnActionPerformed

    private void partFBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_partFBtnActionPerformed
        // TODO add your handling code here:
        partDBtn.setSelected(false);
        pagBtn.setSelected(false);
    }//GEN-LAST:event_partFBtnActionPerformed

    
    public void ejecutarProcesoPasoApaso() throws Exception{
        if((cpu1.idle && cpu2.idle) && readyQueue.isEmpty()){
            JOptionPane.showMessageDialog(this, "Ejecución finalizada", "Aviso",JOptionPane.INFORMATION_MESSAGE);
                return;
        }
        if(estrategiaAsignacion == Estrategia.RR){
            RR_Algorithm rr = (RR_Algorithm)estrategiaManager.getPlanificador();
            rr.incrementQuanta();
            if(rr.isQuantaExpired()){
                cambiarContexto(cpu1, rr);
                cambiarContexto(cpu2, rr);
                rr.restartQuanta();
            }
        }else{
            if(estrategiaAsignacion == Estrategia.SRT){
                SRT_Algorithm srt = (SRT_Algorithm)estrategiaManager.getPlanificador();
                BCP nextBcp1 = srt.getShortestRemainingTime(cpu1.getRunningProcess());
                if (!cpu1.idle && nextBcp1 != null){
                    BCP currentBCP = cpu1.getRunningProcess();
                    cpu1.changeContext(nextBcp1);
                    readyQueue.add(currentBCP);
                }
                BCP nextBcp2 = srt.getShortestRemainingTime(cpu2.getRunningProcess());
                if (!cpu2.idle && nextBcp2 != null){
                    BCP currentBCP = cpu2.getRunningProcess();
                    cpu2.changeContext(nextBcp1);
                    readyQueue.add(currentBCP);
                }
            }

        }
        asignarCpu(cpu1);
        asignarCpu(cpu2);


        if(!cpu1.idle){
            cpu1.fetch();
//            cpu1.execute(cpu1.getRunningProcess());
//            cpu1.execute(bcp);
            cpu1.getRunningProcess().decRafaga();
        }

        if(!cpu2.idle){
            cpu2.fetch();
//            cpu2.execute(cpu2.getRunningProcess());
            cpu2.getRunningProcess().decRafaga();
        }

        cargarBCPs(cpu1.getRunningProcess());
        cargarBCPs(cpu2.getRunningProcess());
        cargarBCPsCPUs(cpu1.ID);
        cargarBCPsCPUs(cpu2.ID);
        cargarLogs();
        refreshTablaProcesos();
        
        /* IMPORTANTE Codigo anterior por si se necesita revisar*/
        // cargar BCP
        /*Instruction proceso = memoriaPrincipal[PC];
        PC+=1;  
        BCP bcp = proceso.bcp;

        cpu1.fetch();
        cpu2.fetch();
        
        // execute
        cpu1.execute(bcp);
        cpu2.execute(bcp);
        
        // cargar BCPs GUI
        cargarBCPs(proceso);
        cargarBCPsCPUs(proceso.bcp.CPU);
        cargarLogs();
        refreshTablaProcesos();  */
        
    }
    
      public void ejecutarProcesoAut() throws Exception{
        
        while(!(cpu1.idle && cpu2.idle) && !readyQueue.isEmpty()){

            if(estrategiaAsignacion == Estrategia.RR){
                RR_Algorithm rr = (RR_Algorithm)estrategiaManager.getPlanificador();
                rr.incrementQuanta();
                if(rr.isQuantaExpired()){
                    cambiarContexto(cpu1, rr);
                    cambiarContexto(cpu2, rr);
                    rr.restartQuanta();
                }
            }else{
                if(estrategiaAsignacion == Estrategia.SRT){
                    SRT_Algorithm srt = (SRT_Algorithm)estrategiaManager.getPlanificador();
                    BCP nextBcp1 = srt.getShortestRemainingTime(cpu1.getRunningProcess());
                    if (!cpu1.idle && nextBcp1 != null){
                        BCP currentBCP = cpu1.getRunningProcess();
                        cpu1.changeContext(nextBcp1);
                        readyQueue.add(currentBCP);
                    }
                    BCP nextBcp2 = srt.getShortestRemainingTime(cpu2.getRunningProcess());
                    if (!cpu2.idle && nextBcp2 != null){
                        BCP currentBCP = cpu2.getRunningProcess();
                        cpu2.changeContext(nextBcp1);
                        readyQueue.add(currentBCP);
                    }
                }

            }
            asignarCpu(cpu1);
            asignarCpu(cpu2);


            if(!cpu1.idle){
                cpu1.fetch();
                cpu1.execute(cpu1.getRunningProcess());
                cpu1.getRunningProcess().decRafaga();
            }

            if(!cpu2.idle){
                cpu2.fetch();
                cpu2.execute(cpu2.getRunningProcess());
                cpu2.getRunningProcess().decRafaga();
            }

            cargarBCPs(cpu1.getRunningProcess());
            cargarBCPs(cpu2.getRunningProcess());
            cargarBCPsCPUs(cpu1.ID);
            cargarBCPsCPUs(cpu2.ID);
            cargarLogs();
            refreshTablaProcesos();

            /* IMPORTANTE Codigo anterior por si se necesita revisar*/
            // cargar BCP
            /*while(memoriaPrincipal[PC] != null){
                Instruction proceso = memoriaPrincipal[PC];
                PC+=1;  
                BCP bcp = proceso.bcp;

                // fetch
                cpu1.fetch();
                cpu2.fetch();

                // execute
                cpu1.execute(bcp);
                cpu2.execute(bcp);

                // cargar BCPs GUI
                cargarBCPs(proceso);
                cargarBCPsCPUs(proceso.bcp.CPU);
                cargarLogs();
                refreshTablaProcesos();
            }*/
        }
          
        
        

    }
    
    public void cargarBCPs(BCP bcpProc){
        DefaultTableModel  model = (DefaultTableModel) bcpTbl3.getModel();   
        model.setRowCount(0);
        Object[] estado = {"Estado: " + String.valueOf(bcpProc.estado)};
        Object[] pc = {"PC: " + String.valueOf(bcpProc.PC)};
        Object[] ac = {"AC: " + String.valueOf(bcpProc.AC)};
        Object[] ax = {"AX: " + String.valueOf(bcpProc.getRegistros()[0])};
        Object[] bx = {"BX: " + String.valueOf(bcpProc.getRegistros()[1])};
        Object[] cx = {"DX: " + String.valueOf(bcpProc.getRegistros()[2])};
        Object[] dx = {"CX: " + String.valueOf(bcpProc.getRegistros()[3])};
        Object[] base = {"Base: " + String.valueOf(bcpProc.getBase())};
        Object[] alcance = {"Alcance: " + String.valueOf(bcpProc.getAlcance())};
        Object[] prioridad = {"Prioridad: " + String.valueOf(bcpProc.getPrioridad())};
        
        model.addRow(estado);
        model.addRow(pc);
        model.addRow(ac);
        model.addRow(ax);
        model.addRow(bx);
        model.addRow(dx);
        model.addRow(cx);
        model.addRow(base);
        model.addRow(alcance);
        model.addRow(prioridad);
    }
    
    public void cargarBCPsCPUs(int cpu){
        if(cpu==1){
            DefaultTableModel  model = (DefaultTableModel) bcpTbl1.getModel();   
            model.setRowCount(0);
            Object[] pc = {"PC: " + String.valueOf(cpu1.PC)};
            Object[] ac = {"AC: " + String.valueOf(cpu1.AC)};
            Object[] ax = {"AX: " + String.valueOf(cpu1.getRegistros()[0])};
            Object[] bx = {"BX: " + String.valueOf(cpu1.getRegistros()[1])};
            Object[] cx = {"DX: " + String.valueOf(cpu1.getRegistros()[2])};
            Object[] dx = {"CX: " + String.valueOf(cpu1.getRegistros()[3])};
            model.addRow(pc);
            model.addRow(ac);
            model.addRow(ax);
            model.addRow(bx);
            model.addRow(dx);
            model.addRow(cx);
        }
        else{
            DefaultTableModel  model1 = (DefaultTableModel) bcpTbl2.getModel();   
            model1.setRowCount(0);
            Object[] pc1 = {"PC: " + String.valueOf(cpu2.PC)};
            Object[] ac1 = {"AC: " + String.valueOf(cpu2.AC)};
            Object[] ax1 = {"AX: " + String.valueOf(cpu2.getRegistros()[0])};
            Object[] bx1 = {"BX: " + String.valueOf(cpu2.getRegistros()[1])};
            Object[] cx1 = {"DX: " + String.valueOf(cpu2.getRegistros()[2])};
            Object[] dx1 = {"CX: " + String.valueOf(cpu2.getRegistros()[3])};
            model1.addRow(pc1);
            model1.addRow(ac1);
            model1.addRow(ax1);
            model1.addRow(bx1);
            model1.addRow(dx1);
            model1.addRow(cx1);
        }
 
    }
    
    public void cargarLogs(){
        DefaultTableModel logs = (DefaultTableModel) logsTbl.getModel();
        logs.setRowCount(0);
        for(String logM: cpu1.mensajes){
            Object[] log = {logM};
            logs.addRow(log);
        }
        DefaultTableModel logs1 = (DefaultTableModel) logsTbl1.getModel();
        logs1.setRowCount(0);
        for(String logM: cpu2.mensajes){        
            Object[] log = {logM};
            logs1.addRow(log);
        }
        
        
        

    }
    
    
    // Carga los archivos y los convierte en las instrucciones a ejecutar 
    public void cargarArchivos(String file){    
        try {
            loader.loadProgram(file);
        } catch (Exception e) {
            System.out.println(e.getMessage());
            System.exit(0);
        }

        List<Instruction> instrucciones = loader.instrucciones;
        if(instrucciones.size()+11 > memoriaPrincipal.length){
            JOptionPane.showMessageDialog(this, "Memoria insuficiente", "ERROR",JOptionPane.ERROR_MESSAGE);
            loader = new ProgramLoader();
            return;
        }
        
        if(posMemoriaLibre + instrucciones.size() >= memoriaPrincipal.length){
            JOptionPane.showMessageDialog(this, "Memoria insuficiente", "ERROR",JOptionPane.ERROR_MESSAGE);
            loader = new ProgramLoader();
            return;
        }
        
        BCP newBCP = new BCP(0);
        newBCP.setEstado(Estado.NUEVO);
        
        newBCP.setBase(posMemoriaLibre);
        newBCP.setAlcance(instrucciones.size());
        
        int j = 0;
        for(int i=posMemoriaLibre; i<espacio_memoria; i++){          
             if(j >= instrucciones.size()){
                posMemoriaLibre = i;
                break;
             }
            Instruction instruction = instrucciones.get(i-11);
            memoriaPrincipal[i] = instruction;
            j++;
        }
        
//        for(int i=0; i<instrucciones.size(); i++){
//            Instruction instruction = instrucciones.get(i);
//            memoriaPrincipal[i] = instruction;
//            posMemoriaLibre = i;
//        }
        
        readyQueue.add(newBCP);
        newBCP.setEstado(Estado.PREPARADO);
        if (filesRead == 0) {
            newBCP.setTiempoLlegada(0);
        }else{
            /* TODO fix tiempo de llegada manual o automatico en configuracion*/
            if(autBtn.isSelected() /*Automático*/){
                Random rand = new Random();
                int time = rand.nextInt(1,11);
                
                newBCP.setTiempoLlegada(time);
            }if(manBtn.isSelected()){
                /* TODO fix agregar tiempo de llegada segun input de usuario */
                if (!"0".equals(tiempoManual.getText())){
                    newBCP.setTiempoLlegada(Integer.valueOf(tiempoManual.getText()));
                }               
            }
            
        }
//        newBCP.setTiempoLlegada(0);
        newBCP.setRafaga(instrucciones.size());
        
        /* IMPORTANTE Codigo anterior por si se necesita revisar*/
        /*int j = 0;
        for(int i=posMemoriaLibre; i<espacio_memoria; i++){
             if(j >= instrucciones.size()){
                posMemoriaLibre = i;
                break;
             }
            Instruction instruccion = instrucciones.get(j);
            instruccion.bcp.setAlcance(i);
            instruccion.bcp.setBase(i);
            instruccion.bcp.tiempoInicio = i-11;
            instruccion.bcp.PC = i;
            memoriaPrincipal[i] = instruccion;
            j++;
        }*/
//        cpu1.setMemoria(memoriaPrincipal);
//        cpu2.setMemoria(memoriaPrincipal);
        actualizarTablaProcesos();
         
    }
    
    public void cargarEstadisticas(){
        int corrimiento = 11;
        int numProceso = 0;
        
        DefaultTableModel estats = (DefaultTableModel) estatsTbl.getModel();
        
        estats.setRowCount(0);
        
        for(int i=numProceso; i+corrimiento < posMemoriaLibre; i++){
            Object[] tiempos = {"P"+String.valueOf(i),String.valueOf(memoriaPrincipal[i+corrimiento].bcp.tiempoInicio),String.valueOf(memoriaPrincipal[i+corrimiento].bcp.tiempoEmpleado)};
            estats.addRow(tiempos);
            numProceso++;
        }
    }
    
    public void refreshTablaProcesos() {
        int corrimiento = 11;
        
        int numProceso = 0;
        DefaultTableModel model = (DefaultTableModel) procesosTbl.getModel();
        DefaultTableModel cpu1Tbl = (DefaultTableModel) cpu1Table.getModel();
        DefaultTableModel cpu2Tbl = (DefaultTableModel) cpu2Table.getModel();
        DefaultTableModel memtbl = (DefaultTableModel) memTable.getModel();
        DefaultTableModel discoTb = (DefaultTableModel) discoTbl.getModel();
        
        model.setRowCount(0);
        cpu1Tbl.setRowCount(0);
        cpu1Tbl.setColumnCount(1);
        cpu2Tbl.setRowCount(0);
        cpu2Tbl.setColumnCount(1);
        memtbl.setRowCount(0);
        discoTb.setRowCount(0);
        int procEscribir1=0;
        int procEscribir2=0;
        for(int i=numProceso; i+corrimiento < posMemoriaLibre; i++){
            Object[] proceso = {String.valueOf(i),String.valueOf(memoriaPrincipal[i+corrimiento].bcp.estado)};
            model.addRow(proceso);
            Object[] instrucASM = {String.valueOf(i),getInstruccionASM(memoriaPrincipal[i+corrimiento])};
            memtbl.addRow(instrucASM);
            discoTb.addRow(instrucASM);
            // Cargar tablas CPU
            Object[] numProc = {"P"+String.valueOf(i)};
            // CPU 1
            if(memoriaPrincipal[i+corrimiento].bcp.CPU == 1){
                cpu1Tbl.addRow(numProc);
                cpu1Tbl.addColumn(String.valueOf(i));
                if(memoriaPrincipal[i+corrimiento].bcp.estado == Estado.FINALIZADO){
                    cpu1Tbl.setValueAt("XXXXXXXXX",procEscribir1 ,procEscribir1+1 );
                    procEscribir1++;
                }              
            }
            else{
                cpu2Tbl.addRow(numProc);
                cpu2Tbl.addColumn(String.valueOf(i));
                if(memoriaPrincipal[i+corrimiento].bcp.estado == Estado.FINALIZADO){
                    cpu2Tbl.setValueAt("XXXXXXXXX",procEscribir2 ,procEscribir2+1 );
                    procEscribir2++;
                }
            }

            numProceso++;
        }


     }
    
     
     public void actualizarTablaProcesos() {
        int corrimiento = 11;
         
        int numProceso = 0;
        DefaultTableModel model = (DefaultTableModel) procesosTbl.getModel();
        DefaultTableModel cpu1Tbl = (DefaultTableModel) cpu1Table.getModel();
        DefaultTableModel cpu2Tbl = (DefaultTableModel) cpu2Table.getModel();
        DefaultTableModel memtbl = (DefaultTableModel) memTable.getModel();
        DefaultTableModel discoTb = (DefaultTableModel) discoTbl.getModel();
        
        for(int i=numProceso; i+corrimiento <= posMemoriaLibre-1; i++){
            Object[] proceso = {String.valueOf(numProceso),String.valueOf(memoriaPrincipal[i+corrimiento].bcp.estado)};
            model.addRow(proceso);
            Object[] instrucASM = {String.valueOf(numProceso),getInstruccionASM(memoriaPrincipal[i+corrimiento])};
            memtbl.addRow(instrucASM);
            discoTb.addRow(instrucASM);
            // Cargar tablas CPU
            Object[] numProc = {"P"+String.valueOf(numProceso)};
            // CPU 1
            if(memoriaPrincipal[i+corrimiento].bcp.CPU == 1){
                cpu1Tbl.addRow(numProc);
                cpu1Tbl.addColumn(String.valueOf(numProceso));
            }
            else{
                cpu2Tbl.addRow(numProc);
                cpu2Tbl.addColumn(String.valueOf(numProceso));
            }

            numProceso++;
        }


     }
     
     
     public String getInstruccionASM(Instruction instruc){
         String res="";
         int lenArgumentos = instruc.token.argumentos.length;
         switch(lenArgumentos){
            case 0 -> res = instruc.token.instruc;
            case 1 -> res = instruc.token.instruc + " " + instruc.token.argumentos[0];
            case 2 -> res = instruc.token.instruc + " " + instruc.token.argumentos[0]+ " "  + instruc.token.argumentos[1];
            case 3 -> res = instruc.token.instruc + " " + instruc.token.argumentos[0] + " " + instruc.token.argumentos[1] + " " + instruc.token.argumentos[2];
                 
         }
         return res;
     }
     
     public void limpiar(){
        memoriaPrincipal = new Instruction[256];

        cpu1 = new Cpu(1);
        cpu2 = new Cpu(2);  

        posMemoriaLibre = 11;
        PC=11;
        
        DefaultTableModel model = (DefaultTableModel) procesosTbl.getModel();
        DefaultTableModel cpu1Tbl = (DefaultTableModel) cpu1Table.getModel();
        DefaultTableModel cpu2Tbl = (DefaultTableModel) cpu2Table.getModel();
        DefaultTableModel memtbl = (DefaultTableModel) memTable.getModel();
        DefaultTableModel bcp1 = (DefaultTableModel) bcpTbl1.getModel();
        DefaultTableModel bcp2 = (DefaultTableModel) bcpTbl2.getModel();
        DefaultTableModel bcp3 = (DefaultTableModel) bcpTbl3.getModel();
        DefaultTableModel logs1 = (DefaultTableModel) logsTbl.getModel();
        DefaultTableModel logs2 = (DefaultTableModel) logsTbl1.getModel();
        DefaultTableModel estats = (DefaultTableModel) estatsTbl.getModel();
        DefaultTableModel disco = (DefaultTableModel) discoTbl.getModel();
        
        estats.setRowCount(0);
        disco.setRowCount(0);
        model.setRowCount(0);
        cpu1Tbl.setRowCount(0);
        cpu1Tbl.setColumnCount(1);
        cpu2Tbl.setRowCount(0);
        cpu2Tbl.setColumnCount(1);
        memtbl.setRowCount(0);
        bcp1.setRowCount(0);
        bcp2.setRowCount(0);
        bcp3.setRowCount(0);
        logs1.setRowCount(0);
        logs2.setRowCount(0);
        JOptionPane.showMessageDialog(this, "Sistema limpio: Todos los valores volvieron a su configuración inicial", "Info",JOptionPane.INFORMATION_MESSAGE);
        
     }
     
    public void actualizarMemoriaP(int nuevaMemoria){
        if(memoriaPrincipal[11] != null){
            JOptionPane.showMessageDialog(this, "Memoria en uso", "ERROR",JOptionPane.ERROR_MESSAGE);
        }
        else{
            JOptionPane.showMessageDialog(this, "Memeria actualizada a: "+ String.valueOf(nuevaMemoria) +"KB", "Info",JOptionPane.INFORMATION_MESSAGE);
            memoriaPrincipal = new Instruction[nuevaMemoria];
        }
        this.espacio_memoria = nuevaMemoria;
    }
     
     
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    
    private void asignarCpu(Cpu cpu){
        if(!cpu.idle){
            return;
        }
        BCP newBcp = estrategiaManager.getProcess();
        if(newBcp != null){
            cpu.changeContext(newBcp);
        }
        
    }
    
    private void cambiarContexto(Cpu cpu, Planificador planificador){
        if(readyQueue.isEmpty()){
            return;
        }
        BCP oldProcess = cpu.getRunningProcess();
        cpu.changeContext(planificador.getNextProcess());
        if(oldProcess != null){
            if(oldProcess.getEstado() == Estado.EJECUCION){
            oldProcess.setEstado(Estado.PREPARADO);
            readyQueue.add(oldProcess);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton autBtn;
    private javax.swing.JTable bcpTbl1;
    private javax.swing.JTable bcpTbl2;
    private javax.swing.JTable bcpTbl3;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.JButton cargarBtn;
    private javax.swing.JButton configBtn;
    private javax.swing.JTable cpu1Table;
    private javax.swing.JTable cpu2Table;
    private javax.swing.JTable cpu3Tbl;
    private javax.swing.JTable cpu4Tbl;
    private javax.swing.JTable discoTbl;
    private javax.swing.JButton ejecutarBtn;
    private javax.swing.JTable estatsTbl;
    private javax.swing.JRadioButton fcfsBtn;
    private javax.swing.JLabel fileNameLbl;
    private javax.swing.JRadioButton hrrnBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JButton limpiarBtn;
    private javax.swing.JTable logsTbl;
    private javax.swing.JTable logsTbl1;
    private javax.swing.JTable logsTbl2;
    private javax.swing.JTable logsTbl3;
    private javax.swing.JRadioButton manBtn;
    private javax.swing.JTable memTable;
    private javax.swing.JRadioButton pagBtn;
    private javax.swing.JRadioButton partDBtn;
    private javax.swing.JRadioButton partFBtn;
    private javax.swing.JButton pasoBtn;
    private javax.swing.JTable procesosTbl;
    private javax.swing.JTextField quantumRR;
    private javax.swing.JRadioButton rrBtn;
    private javax.swing.JRadioButton sjfBtn;
    private javax.swing.JRadioButton srtBtn;
    private javax.swing.JTextField tiempoManual;
    // End of variables declaration//GEN-END:variables
}
